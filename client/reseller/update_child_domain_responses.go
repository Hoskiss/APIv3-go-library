// Code generated by go-swagger; DO NOT EDIT.

package reseller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"APIv3_go_wrapper/models"
)

// UpdateChildDomainReader is a Reader for the UpdateChildDomain structure.
type UpdateChildDomainReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateChildDomainReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateChildDomainNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateChildDomainBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateChildDomainForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateChildDomainNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateChildDomainNoContent creates a UpdateChildDomainNoContent with default headers values
func NewUpdateChildDomainNoContent() *UpdateChildDomainNoContent {
	return &UpdateChildDomainNoContent{}
}

/*UpdateChildDomainNoContent handles this case with default header values.

reseller's child domain updated
*/
type UpdateChildDomainNoContent struct {
}

func (o *UpdateChildDomainNoContent) Error() string {
	return fmt.Sprintf("[PUT /reseller/children/{childAuthKey}/domains/{domainName}][%d] updateChildDomainNoContent ", 204)
}

func (o *UpdateChildDomainNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateChildDomainBadRequest creates a UpdateChildDomainBadRequest with default headers values
func NewUpdateChildDomainBadRequest() *UpdateChildDomainBadRequest {
	return &UpdateChildDomainBadRequest{}
}

/*UpdateChildDomainBadRequest handles this case with default header values.

bad request
*/
type UpdateChildDomainBadRequest struct {
	Payload *models.ErrorModel
}

func (o *UpdateChildDomainBadRequest) Error() string {
	return fmt.Sprintf("[PUT /reseller/children/{childAuthKey}/domains/{domainName}][%d] updateChildDomainBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateChildDomainBadRequest) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *UpdateChildDomainBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateChildDomainForbidden creates a UpdateChildDomainForbidden with default headers values
func NewUpdateChildDomainForbidden() *UpdateChildDomainForbidden {
	return &UpdateChildDomainForbidden{}
}

/*UpdateChildDomainForbidden handles this case with default header values.

Current account is not a reseller
*/
type UpdateChildDomainForbidden struct {
	Payload *models.ErrorModel
}

func (o *UpdateChildDomainForbidden) Error() string {
	return fmt.Sprintf("[PUT /reseller/children/{childAuthKey}/domains/{domainName}][%d] updateChildDomainForbidden  %+v", 403, o.Payload)
}

func (o *UpdateChildDomainForbidden) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *UpdateChildDomainForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateChildDomainNotFound creates a UpdateChildDomainNotFound with default headers values
func NewUpdateChildDomainNotFound() *UpdateChildDomainNotFound {
	return &UpdateChildDomainNotFound{}
}

/*UpdateChildDomainNotFound handles this case with default header values.

Child auth key not found
*/
type UpdateChildDomainNotFound struct {
	Payload *models.ErrorModel
}

func (o *UpdateChildDomainNotFound) Error() string {
	return fmt.Sprintf("[PUT /reseller/children/{childAuthKey}/domains/{domainName}][%d] updateChildDomainNotFound  %+v", 404, o.Payload)
}

func (o *UpdateChildDomainNotFound) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *UpdateChildDomainNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
