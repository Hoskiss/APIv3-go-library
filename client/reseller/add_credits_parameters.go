// Code generated by go-swagger; DO NOT EDIT.

package reseller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"APIv3_go_wrapper/models"
)

// NewAddCreditsParams creates a new AddCreditsParams object
// with the default values initialized.
func NewAddCreditsParams() *AddCreditsParams {
	var ()
	return &AddCreditsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddCreditsParamsWithTimeout creates a new AddCreditsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddCreditsParamsWithTimeout(timeout time.Duration) *AddCreditsParams {
	var ()
	return &AddCreditsParams{

		timeout: timeout,
	}
}

// NewAddCreditsParamsWithContext creates a new AddCreditsParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddCreditsParamsWithContext(ctx context.Context) *AddCreditsParams {
	var ()
	return &AddCreditsParams{

		Context: ctx,
	}
}

// NewAddCreditsParamsWithHTTPClient creates a new AddCreditsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddCreditsParamsWithHTTPClient(client *http.Client) *AddCreditsParams {
	var ()
	return &AddCreditsParams{
		HTTPClient: client,
	}
}

/*AddCreditsParams contains all the parameters to send to the API endpoint
for the add credits operation typically these are written to a http.Request
*/
type AddCreditsParams struct {

	/*AddCredits
	  Values to post to add credit to a specific child account

	*/
	AddCredits *models.AddCredits
	/*ChildAuthKey
	  auth key of reseller's child

	*/
	ChildAuthKey string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add credits params
func (o *AddCreditsParams) WithTimeout(timeout time.Duration) *AddCreditsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add credits params
func (o *AddCreditsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add credits params
func (o *AddCreditsParams) WithContext(ctx context.Context) *AddCreditsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add credits params
func (o *AddCreditsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add credits params
func (o *AddCreditsParams) WithHTTPClient(client *http.Client) *AddCreditsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add credits params
func (o *AddCreditsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddCredits adds the addCredits to the add credits params
func (o *AddCreditsParams) WithAddCredits(addCredits *models.AddCredits) *AddCreditsParams {
	o.SetAddCredits(addCredits)
	return o
}

// SetAddCredits adds the addCredits to the add credits params
func (o *AddCreditsParams) SetAddCredits(addCredits *models.AddCredits) {
	o.AddCredits = addCredits
}

// WithChildAuthKey adds the childAuthKey to the add credits params
func (o *AddCreditsParams) WithChildAuthKey(childAuthKey string) *AddCreditsParams {
	o.SetChildAuthKey(childAuthKey)
	return o
}

// SetChildAuthKey adds the childAuthKey to the add credits params
func (o *AddCreditsParams) SetChildAuthKey(childAuthKey string) {
	o.ChildAuthKey = childAuthKey
}

// WriteToRequest writes these params to a swagger request
func (o *AddCreditsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AddCredits != nil {
		if err := r.SetBodyParam(o.AddCredits); err != nil {
			return err
		}
	}

	// path param childAuthKey
	if err := r.SetPathParam("childAuthKey", o.ChildAuthKey); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
