// Code generated by go-swagger; DO NOT EDIT.

package smtp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTransacBlockedContactsParams creates a new GetTransacBlockedContactsParams object
// with the default values initialized.
func NewGetTransacBlockedContactsParams() *GetTransacBlockedContactsParams {
	var (
		limitDefault  = int64(50)
		offsetDefault = int64(0)
	)
	return &GetTransacBlockedContactsParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTransacBlockedContactsParamsWithTimeout creates a new GetTransacBlockedContactsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTransacBlockedContactsParamsWithTimeout(timeout time.Duration) *GetTransacBlockedContactsParams {
	var (
		limitDefault  = int64(50)
		offsetDefault = int64(0)
	)
	return &GetTransacBlockedContactsParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,

		timeout: timeout,
	}
}

// NewGetTransacBlockedContactsParamsWithContext creates a new GetTransacBlockedContactsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTransacBlockedContactsParamsWithContext(ctx context.Context) *GetTransacBlockedContactsParams {
	var (
		limitDefault  = int64(50)
		offsetDefault = int64(0)
	)
	return &GetTransacBlockedContactsParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,

		Context: ctx,
	}
}

// NewGetTransacBlockedContactsParamsWithHTTPClient creates a new GetTransacBlockedContactsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTransacBlockedContactsParamsWithHTTPClient(client *http.Client) *GetTransacBlockedContactsParams {
	var (
		limitDefault  = int64(50)
		offsetDefault = int64(0)
	)
	return &GetTransacBlockedContactsParams{
		Limit:      &limitDefault,
		Offset:     &offsetDefault,
		HTTPClient: client,
	}
}

/*GetTransacBlockedContactsParams contains all the parameters to send to the API endpoint
for the get transac blocked contacts operation typically these are written to a http.Request
*/
type GetTransacBlockedContactsParams struct {

	/*EndDate
	  Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts

	*/
	EndDate *string
	/*Limit
	  Number of documents returned per page

	*/
	Limit *int64
	/*Offset
	  Index of the first document on the page

	*/
	Offset *int64
	/*Senders
	  Comma separated list of emails of the senders from which contacts are blocked or unsubscribed

	*/
	Senders []string
	/*StartDate
	  Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts

	*/
	StartDate *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get transac blocked contacts params
func (o *GetTransacBlockedContactsParams) WithTimeout(timeout time.Duration) *GetTransacBlockedContactsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get transac blocked contacts params
func (o *GetTransacBlockedContactsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get transac blocked contacts params
func (o *GetTransacBlockedContactsParams) WithContext(ctx context.Context) *GetTransacBlockedContactsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get transac blocked contacts params
func (o *GetTransacBlockedContactsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get transac blocked contacts params
func (o *GetTransacBlockedContactsParams) WithHTTPClient(client *http.Client) *GetTransacBlockedContactsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get transac blocked contacts params
func (o *GetTransacBlockedContactsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndDate adds the endDate to the get transac blocked contacts params
func (o *GetTransacBlockedContactsParams) WithEndDate(endDate *string) *GetTransacBlockedContactsParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the get transac blocked contacts params
func (o *GetTransacBlockedContactsParams) SetEndDate(endDate *string) {
	o.EndDate = endDate
}

// WithLimit adds the limit to the get transac blocked contacts params
func (o *GetTransacBlockedContactsParams) WithLimit(limit *int64) *GetTransacBlockedContactsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get transac blocked contacts params
func (o *GetTransacBlockedContactsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get transac blocked contacts params
func (o *GetTransacBlockedContactsParams) WithOffset(offset *int64) *GetTransacBlockedContactsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get transac blocked contacts params
func (o *GetTransacBlockedContactsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithSenders adds the senders to the get transac blocked contacts params
func (o *GetTransacBlockedContactsParams) WithSenders(senders []string) *GetTransacBlockedContactsParams {
	o.SetSenders(senders)
	return o
}

// SetSenders adds the senders to the get transac blocked contacts params
func (o *GetTransacBlockedContactsParams) SetSenders(senders []string) {
	o.Senders = senders
}

// WithStartDate adds the startDate to the get transac blocked contacts params
func (o *GetTransacBlockedContactsParams) WithStartDate(startDate *string) *GetTransacBlockedContactsParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get transac blocked contacts params
func (o *GetTransacBlockedContactsParams) SetStartDate(startDate *string) {
	o.StartDate = startDate
}

// WriteToRequest writes these params to a swagger request
func (o *GetTransacBlockedContactsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndDate != nil {

		// query param endDate
		var qrEndDate string
		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate
		if qEndDate != "" {
			if err := r.SetQueryParam("endDate", qEndDate); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	valuesSenders := o.Senders

	joinedSenders := swag.JoinByFormat(valuesSenders, "csv")
	// query array param senders
	if err := r.SetQueryParam("senders", joinedSenders...); err != nil {
		return err
	}

	if o.StartDate != nil {

		// query param startDate
		var qrStartDate string
		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate
		if qStartDate != "" {
			if err := r.SetQueryParam("startDate", qStartDate); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
