// Code generated by go-swagger; DO NOT EDIT.

package email_campaigns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new email campaigns API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for email campaigns API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateEmailCampaign(params *CreateEmailCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*CreateEmailCampaignCreated, error)

	DeleteEmailCampaign(params *DeleteEmailCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEmailCampaignNoContent, error)

	EmailExportRecipients(params *EmailExportRecipientsParams, authInfo runtime.ClientAuthInfoWriter) (*EmailExportRecipientsAccepted, error)

	GetAbTestCampaignResult(params *GetAbTestCampaignResultParams, authInfo runtime.ClientAuthInfoWriter) (*GetAbTestCampaignResultOK, error)

	GetEmailCampaign(params *GetEmailCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmailCampaignOK, error)

	GetEmailCampaigns(params *GetEmailCampaignsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmailCampaignsOK, error)

	GetSharedTemplateURL(params *GetSharedTemplateURLParams, authInfo runtime.ClientAuthInfoWriter) (*GetSharedTemplateURLOK, error)

	SendEmailCampaignNow(params *SendEmailCampaignNowParams, authInfo runtime.ClientAuthInfoWriter) (*SendEmailCampaignNowNoContent, error)

	SendReport(params *SendReportParams, authInfo runtime.ClientAuthInfoWriter) (*SendReportNoContent, error)

	SendTestEmail(params *SendTestEmailParams, authInfo runtime.ClientAuthInfoWriter) (*SendTestEmailNoContent, error)

	UpdateCampaignStatus(params *UpdateCampaignStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCampaignStatusNoContent, error)

	UpdateEmailCampaign(params *UpdateEmailCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEmailCampaignNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateEmailCampaign creates an email campaign
*/
func (a *Client) CreateEmailCampaign(params *CreateEmailCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*CreateEmailCampaignCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEmailCampaignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createEmailCampaign",
		Method:             "POST",
		PathPattern:        "/emailCampaigns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEmailCampaignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEmailCampaignCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createEmailCampaign: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteEmailCampaign deletes an email campaign
*/
func (a *Client) DeleteEmailCampaign(params *DeleteEmailCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEmailCampaignNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEmailCampaignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEmailCampaign",
		Method:             "DELETE",
		PathPattern:        "/emailCampaigns/{campaignId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEmailCampaignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEmailCampaignNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEmailCampaign: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EmailExportRecipients exports the recipients of a campaign
*/
func (a *Client) EmailExportRecipients(params *EmailExportRecipientsParams, authInfo runtime.ClientAuthInfoWriter) (*EmailExportRecipientsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailExportRecipientsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "emailExportRecipients",
		Method:             "POST",
		PathPattern:        "/emailCampaigns/{campaignId}/exportRecipients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailExportRecipientsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailExportRecipientsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for emailExportRecipients: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAbTestCampaignResult gets a b test email campaign result

  Obtain winning version of an A/B test email campaign
*/
func (a *Client) GetAbTestCampaignResult(params *GetAbTestCampaignResultParams, authInfo runtime.ClientAuthInfoWriter) (*GetAbTestCampaignResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAbTestCampaignResultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAbTestCampaignResult",
		Method:             "GET",
		PathPattern:        "/emailCampaigns/{campaignId}/abTestCampaignResult",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAbTestCampaignResultReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAbTestCampaignResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAbTestCampaignResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEmailCampaign gets campaign informations
*/
func (a *Client) GetEmailCampaign(params *GetEmailCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmailCampaignOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmailCampaignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEmailCampaign",
		Method:             "GET",
		PathPattern:        "/emailCampaigns/{campaignId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEmailCampaignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEmailCampaignOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEmailCampaign: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEmailCampaigns returns all your created campaigns
*/
func (a *Client) GetEmailCampaigns(params *GetEmailCampaignsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmailCampaignsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmailCampaignsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEmailCampaigns",
		Method:             "GET",
		PathPattern:        "/emailCampaigns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEmailCampaignsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEmailCampaignsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEmailCampaigns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSharedTemplateURL gets a shared template url

  Get a unique URL to share & import an email template from one Sendinblue account to another.
*/
func (a *Client) GetSharedTemplateURL(params *GetSharedTemplateURLParams, authInfo runtime.ClientAuthInfoWriter) (*GetSharedTemplateURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSharedTemplateURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSharedTemplateUrl",
		Method:             "GET",
		PathPattern:        "/emailCampaigns/{campaignId}/sharedUrl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSharedTemplateURLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSharedTemplateURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSharedTemplateUrl: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SendEmailCampaignNow sends an email campaign immediately based on campaign Id
*/
func (a *Client) SendEmailCampaignNow(params *SendEmailCampaignNowParams, authInfo runtime.ClientAuthInfoWriter) (*SendEmailCampaignNowNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendEmailCampaignNowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendEmailCampaignNow",
		Method:             "POST",
		PathPattern:        "/emailCampaigns/{campaignId}/sendNow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendEmailCampaignNowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendEmailCampaignNowNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sendEmailCampaignNow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SendReport sends the report of a campaigns

  A PDF will be sent to the specified email addresses
*/
func (a *Client) SendReport(params *SendReportParams, authInfo runtime.ClientAuthInfoWriter) (*SendReportNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendReport",
		Method:             "POST",
		PathPattern:        "/emailCampaigns/{campaignId}/sendReport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendReportNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sendReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SendTestEmail sends an email campaign to your test list
*/
func (a *Client) SendTestEmail(params *SendTestEmailParams, authInfo runtime.ClientAuthInfoWriter) (*SendTestEmailNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendTestEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendTestEmail",
		Method:             "POST",
		PathPattern:        "/emailCampaigns/{campaignId}/sendTest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendTestEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendTestEmailNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sendTestEmail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCampaignStatus updates a campaign status
*/
func (a *Client) UpdateCampaignStatus(params *UpdateCampaignStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCampaignStatusNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCampaignStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCampaignStatus",
		Method:             "PUT",
		PathPattern:        "/emailCampaigns/{campaignId}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCampaignStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCampaignStatusNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateCampaignStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateEmailCampaign updates a campaign
*/
func (a *Client) UpdateEmailCampaign(params *UpdateEmailCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEmailCampaignNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEmailCampaignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateEmailCampaign",
		Method:             "PUT",
		PathPattern:        "/emailCampaigns/{campaignId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEmailCampaignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEmailCampaignNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateEmailCampaign: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
