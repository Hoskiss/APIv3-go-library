// Code generated by go-swagger; DO NOT EDIT.

package email_campaigns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/sendinblue/APIv3-go-library/models"
)

// NewUpdateEmailCampaignParams creates a new UpdateEmailCampaignParams object
// with the default values initialized.
func NewUpdateEmailCampaignParams() *UpdateEmailCampaignParams {
	var ()
	return &UpdateEmailCampaignParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateEmailCampaignParamsWithTimeout creates a new UpdateEmailCampaignParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateEmailCampaignParamsWithTimeout(timeout time.Duration) *UpdateEmailCampaignParams {
	var ()
	return &UpdateEmailCampaignParams{

		timeout: timeout,
	}
}

// NewUpdateEmailCampaignParamsWithContext creates a new UpdateEmailCampaignParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateEmailCampaignParamsWithContext(ctx context.Context) *UpdateEmailCampaignParams {
	var ()
	return &UpdateEmailCampaignParams{

		Context: ctx,
	}
}

// NewUpdateEmailCampaignParamsWithHTTPClient creates a new UpdateEmailCampaignParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateEmailCampaignParamsWithHTTPClient(client *http.Client) *UpdateEmailCampaignParams {
	var ()
	return &UpdateEmailCampaignParams{
		HTTPClient: client,
	}
}

/*UpdateEmailCampaignParams contains all the parameters to send to the API endpoint
for the update email campaign operation typically these are written to a http.Request
*/
type UpdateEmailCampaignParams struct {

	/*CampaignID
	  Id of the campaign

	*/
	CampaignID int64
	/*EmailCampaign
	  Values to update a campaign

	*/
	EmailCampaign *models.UpdateEmailCampaign

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update email campaign params
func (o *UpdateEmailCampaignParams) WithTimeout(timeout time.Duration) *UpdateEmailCampaignParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update email campaign params
func (o *UpdateEmailCampaignParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update email campaign params
func (o *UpdateEmailCampaignParams) WithContext(ctx context.Context) *UpdateEmailCampaignParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update email campaign params
func (o *UpdateEmailCampaignParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update email campaign params
func (o *UpdateEmailCampaignParams) WithHTTPClient(client *http.Client) *UpdateEmailCampaignParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update email campaign params
func (o *UpdateEmailCampaignParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCampaignID adds the campaignID to the update email campaign params
func (o *UpdateEmailCampaignParams) WithCampaignID(campaignID int64) *UpdateEmailCampaignParams {
	o.SetCampaignID(campaignID)
	return o
}

// SetCampaignID adds the campaignId to the update email campaign params
func (o *UpdateEmailCampaignParams) SetCampaignID(campaignID int64) {
	o.CampaignID = campaignID
}

// WithEmailCampaign adds the emailCampaign to the update email campaign params
func (o *UpdateEmailCampaignParams) WithEmailCampaign(emailCampaign *models.UpdateEmailCampaign) *UpdateEmailCampaignParams {
	o.SetEmailCampaign(emailCampaign)
	return o
}

// SetEmailCampaign adds the emailCampaign to the update email campaign params
func (o *UpdateEmailCampaignParams) SetEmailCampaign(emailCampaign *models.UpdateEmailCampaign) {
	o.EmailCampaign = emailCampaign
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateEmailCampaignParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param campaignId
	if err := r.SetPathParam("campaignId", swag.FormatInt64(o.CampaignID)); err != nil {
		return err
	}

	if o.EmailCampaign != nil {
		if err := r.SetBodyParam(o.EmailCampaign); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
