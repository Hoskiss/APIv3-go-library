// Code generated by go-swagger; DO NOT EDIT.

package s_m_s_campaigns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new s m s campaigns API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for s m s campaigns API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSmsCampaign(params *CreateSmsCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSmsCampaignCreated, error)

	DeleteSmsCampaign(params *DeleteSmsCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSmsCampaignNoContent, error)

	GetSmsCampaign(params *GetSmsCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmsCampaignOK, error)

	GetSmsCampaigns(params *GetSmsCampaignsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmsCampaignsOK, error)

	RequestSmsRecipientExport(params *RequestSmsRecipientExportParams, authInfo runtime.ClientAuthInfoWriter) (*RequestSmsRecipientExportAccepted, error)

	SendSmsCampaignNow(params *SendSmsCampaignNowParams, authInfo runtime.ClientAuthInfoWriter) (*SendSmsCampaignNowNoContent, error)

	SendSmsReport(params *SendSmsReportParams, authInfo runtime.ClientAuthInfoWriter) (*SendSmsReportNoContent, error)

	SendTestSms(params *SendTestSmsParams, authInfo runtime.ClientAuthInfoWriter) (*SendTestSmsNoContent, error)

	UpdateSmsCampaign(params *UpdateSmsCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSmsCampaignNoContent, error)

	UpdateSmsCampaignStatus(params *UpdateSmsCampaignStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSmsCampaignStatusNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateSmsCampaign creates an s m s campaign
*/
func (a *Client) CreateSmsCampaign(params *CreateSmsCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSmsCampaignCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSmsCampaignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSmsCampaign",
		Method:             "POST",
		PathPattern:        "/smsCampaigns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSmsCampaignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSmsCampaignCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSmsCampaign: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSmsCampaign deletes the s m s campaign
*/
func (a *Client) DeleteSmsCampaign(params *DeleteSmsCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSmsCampaignNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSmsCampaignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSmsCampaign",
		Method:             "DELETE",
		PathPattern:        "/smsCampaigns/{campaignId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSmsCampaignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSmsCampaignNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSmsCampaign: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSmsCampaign gets an s m s campaign
*/
func (a *Client) GetSmsCampaign(params *GetSmsCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmsCampaignOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmsCampaignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmsCampaign",
		Method:             "GET",
		PathPattern:        "/smsCampaigns/{campaignId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmsCampaignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSmsCampaignOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSmsCampaign: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSmsCampaigns returns the informations for all your created s m s campaigns
*/
func (a *Client) GetSmsCampaigns(params *GetSmsCampaignsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmsCampaignsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmsCampaignsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmsCampaigns",
		Method:             "GET",
		PathPattern:        "/smsCampaigns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmsCampaignsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSmsCampaignsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSmsCampaigns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RequestSmsRecipientExport exports the recipients of the specified campaign

  It returns the background process ID which on completion calls the notify URL that you have set in the input.
*/
func (a *Client) RequestSmsRecipientExport(params *RequestSmsRecipientExportParams, authInfo runtime.ClientAuthInfoWriter) (*RequestSmsRecipientExportAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestSmsRecipientExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "requestSmsRecipientExport",
		Method:             "POST",
		PathPattern:        "/smsCampaigns/{campaignId}/exportRecipients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestSmsRecipientExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestSmsRecipientExportAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for requestSmsRecipientExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SendSmsCampaignNow sends your s m s campaign immediately
*/
func (a *Client) SendSmsCampaignNow(params *SendSmsCampaignNowParams, authInfo runtime.ClientAuthInfoWriter) (*SendSmsCampaignNowNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendSmsCampaignNowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendSmsCampaignNow",
		Method:             "POST",
		PathPattern:        "/smsCampaigns/{campaignId}/sendNow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendSmsCampaignNowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendSmsCampaignNowNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sendSmsCampaignNow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SendSmsReport sends report of s m s campaigns

  Send report of Sent and Archived campaign, to the specified email addresses, with respective data and a pdf attachment in detail.
*/
func (a *Client) SendSmsReport(params *SendSmsReportParams, authInfo runtime.ClientAuthInfoWriter) (*SendSmsReportNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendSmsReportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendSmsReport",
		Method:             "POST",
		PathPattern:        "/smsCampaigns/{campaignId}/sendReport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendSmsReportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendSmsReportNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sendSmsReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SendTestSms sends an s m s
*/
func (a *Client) SendTestSms(params *SendTestSmsParams, authInfo runtime.ClientAuthInfoWriter) (*SendTestSmsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendTestSmsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendTestSms",
		Method:             "POST",
		PathPattern:        "/smsCampaigns/{campaignId}/sendTest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SendTestSmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SendTestSmsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sendTestSms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSmsCampaign updates an s m s campaign
*/
func (a *Client) UpdateSmsCampaign(params *UpdateSmsCampaignParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSmsCampaignNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSmsCampaignParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSmsCampaign",
		Method:             "PUT",
		PathPattern:        "/smsCampaigns/{campaignId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSmsCampaignReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSmsCampaignNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSmsCampaign: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSmsCampaignStatus updates the campaign status
*/
func (a *Client) UpdateSmsCampaignStatus(params *UpdateSmsCampaignStatusParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSmsCampaignStatusNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSmsCampaignStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSmsCampaignStatus",
		Method:             "PUT",
		PathPattern:        "/smsCampaigns/{campaignId}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSmsCampaignStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSmsCampaignStatusNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSmsCampaignStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
