// Code generated by go-swagger; DO NOT EDIT.

package s_m_s_campaigns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"APIv3_go_wrapper/models"
)

// UpdateSmsCampaignStatusReader is a Reader for the UpdateSmsCampaignStatus structure.
type UpdateSmsCampaignStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSmsCampaignStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateSmsCampaignStatusNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSmsCampaignStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSmsCampaignStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateSmsCampaignStatusNoContent creates a UpdateSmsCampaignStatusNoContent with default headers values
func NewUpdateSmsCampaignStatusNoContent() *UpdateSmsCampaignStatusNoContent {
	return &UpdateSmsCampaignStatusNoContent{}
}

/*UpdateSmsCampaignStatusNoContent handles this case with default header values.

The campaign status has been updated successfully
*/
type UpdateSmsCampaignStatusNoContent struct {
}

func (o *UpdateSmsCampaignStatusNoContent) Error() string {
	return fmt.Sprintf("[PUT /smsCampaigns/{campaignId}/status][%d] updateSmsCampaignStatusNoContent ", 204)
}

func (o *UpdateSmsCampaignStatusNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSmsCampaignStatusBadRequest creates a UpdateSmsCampaignStatusBadRequest with default headers values
func NewUpdateSmsCampaignStatusBadRequest() *UpdateSmsCampaignStatusBadRequest {
	return &UpdateSmsCampaignStatusBadRequest{}
}

/*UpdateSmsCampaignStatusBadRequest handles this case with default header values.

bad request
*/
type UpdateSmsCampaignStatusBadRequest struct {
	Payload *models.ErrorModel
}

func (o *UpdateSmsCampaignStatusBadRequest) Error() string {
	return fmt.Sprintf("[PUT /smsCampaigns/{campaignId}/status][%d] updateSmsCampaignStatusBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSmsCampaignStatusBadRequest) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *UpdateSmsCampaignStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSmsCampaignStatusNotFound creates a UpdateSmsCampaignStatusNotFound with default headers values
func NewUpdateSmsCampaignStatusNotFound() *UpdateSmsCampaignStatusNotFound {
	return &UpdateSmsCampaignStatusNotFound{}
}

/*UpdateSmsCampaignStatusNotFound handles this case with default header values.

Campaign ID not found
*/
type UpdateSmsCampaignStatusNotFound struct {
	Payload *models.ErrorModel
}

func (o *UpdateSmsCampaignStatusNotFound) Error() string {
	return fmt.Sprintf("[PUT /smsCampaigns/{campaignId}/status][%d] updateSmsCampaignStatusNotFound  %+v", 404, o.Payload)
}

func (o *UpdateSmsCampaignStatusNotFound) GetPayload() *models.ErrorModel {
	return o.Payload
}

func (o *UpdateSmsCampaignStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
