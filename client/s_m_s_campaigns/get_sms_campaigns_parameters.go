// Code generated by go-swagger; DO NOT EDIT.

package s_m_s_campaigns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSmsCampaignsParams creates a new GetSmsCampaignsParams object
// with the default values initialized.
func NewGetSmsCampaignsParams() *GetSmsCampaignsParams {
	var (
		limitDefault  = int64(500)
		offsetDefault = int64(0)
	)
	return &GetSmsCampaignsParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSmsCampaignsParamsWithTimeout creates a new GetSmsCampaignsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSmsCampaignsParamsWithTimeout(timeout time.Duration) *GetSmsCampaignsParams {
	var (
		limitDefault  = int64(500)
		offsetDefault = int64(0)
	)
	return &GetSmsCampaignsParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,

		timeout: timeout,
	}
}

// NewGetSmsCampaignsParamsWithContext creates a new GetSmsCampaignsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSmsCampaignsParamsWithContext(ctx context.Context) *GetSmsCampaignsParams {
	var (
		limitDefault  = int64(500)
		offsetDefault = int64(0)
	)
	return &GetSmsCampaignsParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,

		Context: ctx,
	}
}

// NewGetSmsCampaignsParamsWithHTTPClient creates a new GetSmsCampaignsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSmsCampaignsParamsWithHTTPClient(client *http.Client) *GetSmsCampaignsParams {
	var (
		limitDefault  = int64(500)
		offsetDefault = int64(0)
	)
	return &GetSmsCampaignsParams{
		Limit:      &limitDefault,
		Offset:     &offsetDefault,
		HTTPClient: client,
	}
}

/*GetSmsCampaignsParams contains all the parameters to send to the API endpoint
for the get sms campaigns operation typically these are written to a http.Request
*/
type GetSmsCampaignsParams struct {

	/*EndDate
	  Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )

	*/
	EndDate *strfmt.DateTime
	/*Limit
	  Number limitation for the result returned

	*/
	Limit *int64
	/*Offset
	  Beginning point in the list to retrieve from.

	*/
	Offset *int64
	/*StartDate
	  Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' )

	*/
	StartDate *strfmt.DateTime
	/*Status
	  Status of campaign.

	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get sms campaigns params
func (o *GetSmsCampaignsParams) WithTimeout(timeout time.Duration) *GetSmsCampaignsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get sms campaigns params
func (o *GetSmsCampaignsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get sms campaigns params
func (o *GetSmsCampaignsParams) WithContext(ctx context.Context) *GetSmsCampaignsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get sms campaigns params
func (o *GetSmsCampaignsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get sms campaigns params
func (o *GetSmsCampaignsParams) WithHTTPClient(client *http.Client) *GetSmsCampaignsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get sms campaigns params
func (o *GetSmsCampaignsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndDate adds the endDate to the get sms campaigns params
func (o *GetSmsCampaignsParams) WithEndDate(endDate *strfmt.DateTime) *GetSmsCampaignsParams {
	o.SetEndDate(endDate)
	return o
}

// SetEndDate adds the endDate to the get sms campaigns params
func (o *GetSmsCampaignsParams) SetEndDate(endDate *strfmt.DateTime) {
	o.EndDate = endDate
}

// WithLimit adds the limit to the get sms campaigns params
func (o *GetSmsCampaignsParams) WithLimit(limit *int64) *GetSmsCampaignsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get sms campaigns params
func (o *GetSmsCampaignsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get sms campaigns params
func (o *GetSmsCampaignsParams) WithOffset(offset *int64) *GetSmsCampaignsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get sms campaigns params
func (o *GetSmsCampaignsParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithStartDate adds the startDate to the get sms campaigns params
func (o *GetSmsCampaignsParams) WithStartDate(startDate *strfmt.DateTime) *GetSmsCampaignsParams {
	o.SetStartDate(startDate)
	return o
}

// SetStartDate adds the startDate to the get sms campaigns params
func (o *GetSmsCampaignsParams) SetStartDate(startDate *strfmt.DateTime) {
	o.StartDate = startDate
}

// WithStatus adds the status to the get sms campaigns params
func (o *GetSmsCampaignsParams) WithStatus(status *string) *GetSmsCampaignsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get sms campaigns params
func (o *GetSmsCampaignsParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *GetSmsCampaignsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndDate != nil {

		// query param endDate
		var qrEndDate strfmt.DateTime
		if o.EndDate != nil {
			qrEndDate = *o.EndDate
		}
		qEndDate := qrEndDate.String()
		if qEndDate != "" {
			if err := r.SetQueryParam("endDate", qEndDate); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.StartDate != nil {

		// query param startDate
		var qrStartDate strfmt.DateTime
		if o.StartDate != nil {
			qrStartDate = *o.StartDate
		}
		qStartDate := qrStartDate.String()
		if qStartDate != "" {
			if err := r.SetQueryParam("startDate", qStartDate); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
