// Code generated by go-swagger; DO NOT EDIT.

package s_m_s_campaigns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/sendinblue/APIv3-go-library/models"
)

// NewSendTestSmsParams creates a new SendTestSmsParams object
// with the default values initialized.
func NewSendTestSmsParams() *SendTestSmsParams {
	var ()
	return &SendTestSmsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSendTestSmsParamsWithTimeout creates a new SendTestSmsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSendTestSmsParamsWithTimeout(timeout time.Duration) *SendTestSmsParams {
	var ()
	return &SendTestSmsParams{

		timeout: timeout,
	}
}

// NewSendTestSmsParamsWithContext creates a new SendTestSmsParams object
// with the default values initialized, and the ability to set a context for a request
func NewSendTestSmsParamsWithContext(ctx context.Context) *SendTestSmsParams {
	var ()
	return &SendTestSmsParams{

		Context: ctx,
	}
}

// NewSendTestSmsParamsWithHTTPClient creates a new SendTestSmsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSendTestSmsParamsWithHTTPClient(client *http.Client) *SendTestSmsParams {
	var ()
	return &SendTestSmsParams{
		HTTPClient: client,
	}
}

/*SendTestSmsParams contains all the parameters to send to the API endpoint
for the send test sms operation typically these are written to a http.Request
*/
type SendTestSmsParams struct {

	/*CampaignID
	  Id of the SMS campaign

	*/
	CampaignID int64
	/*PhoneNumber
	  Mobile number of the recipient with the country code. This number must belong to one of your contacts in SendinBlue account and must not be blacklisted

	*/
	PhoneNumber *models.SendTestSms

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the send test sms params
func (o *SendTestSmsParams) WithTimeout(timeout time.Duration) *SendTestSmsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the send test sms params
func (o *SendTestSmsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the send test sms params
func (o *SendTestSmsParams) WithContext(ctx context.Context) *SendTestSmsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the send test sms params
func (o *SendTestSmsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the send test sms params
func (o *SendTestSmsParams) WithHTTPClient(client *http.Client) *SendTestSmsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the send test sms params
func (o *SendTestSmsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCampaignID adds the campaignID to the send test sms params
func (o *SendTestSmsParams) WithCampaignID(campaignID int64) *SendTestSmsParams {
	o.SetCampaignID(campaignID)
	return o
}

// SetCampaignID adds the campaignId to the send test sms params
func (o *SendTestSmsParams) SetCampaignID(campaignID int64) {
	o.CampaignID = campaignID
}

// WithPhoneNumber adds the phoneNumber to the send test sms params
func (o *SendTestSmsParams) WithPhoneNumber(phoneNumber *models.SendTestSms) *SendTestSmsParams {
	o.SetPhoneNumber(phoneNumber)
	return o
}

// SetPhoneNumber adds the phoneNumber to the send test sms params
func (o *SendTestSmsParams) SetPhoneNumber(phoneNumber *models.SendTestSms) {
	o.PhoneNumber = phoneNumber
}

// WriteToRequest writes these params to a swagger request
func (o *SendTestSmsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param campaignId
	if err := r.SetPathParam("campaignId", swag.FormatInt64(o.CampaignID)); err != nil {
		return err
	}

	if o.PhoneNumber != nil {
		if err := r.SetBodyParam(o.PhoneNumber); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
