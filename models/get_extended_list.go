// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetExtendedList get extended list
// swagger:model getExtendedList
type GetExtendedList struct {
	GetList

	// campaign stats
	CampaignStats []*GetExtendedListCampaignStatsItems0 `json:"campaignStats"`

	// Creation UTC date-time of the list (YYYY-MM-DDTHH:mm:ss.SSSZ)
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// Status telling if the list is dynamic or not (true=dynamic, false=not dynamic)
	DynamicList bool `json:"dynamicList,omitempty"`

	// ID of the folder
	// Required: true
	FolderID *int64 `json:"folderId"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *GetExtendedList) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 GetList
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.GetList = aO0

	// AO1
	var dataAO1 struct {
		CampaignStats []*GetExtendedListCampaignStatsItems0 `json:"campaignStats"`

		CreatedAt *strfmt.DateTime `json:"createdAt"`

		DynamicList bool `json:"dynamicList,omitempty"`

		FolderID *int64 `json:"folderId"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CampaignStats = dataAO1.CampaignStats

	m.CreatedAt = dataAO1.CreatedAt

	m.DynamicList = dataAO1.DynamicList

	m.FolderID = dataAO1.FolderID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m GetExtendedList) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.GetList)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		CampaignStats []*GetExtendedListCampaignStatsItems0 `json:"campaignStats"`

		CreatedAt *strfmt.DateTime `json:"createdAt"`

		DynamicList bool `json:"dynamicList,omitempty"`

		FolderID *int64 `json:"folderId"`
	}

	dataAO1.CampaignStats = m.CampaignStats

	dataAO1.CreatedAt = m.CreatedAt

	dataAO1.DynamicList = m.DynamicList

	dataAO1.FolderID = m.FolderID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get extended list
func (m *GetExtendedList) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with GetList
	if err := m.GetList.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCampaignStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetExtendedList) validateCampaignStats(formats strfmt.Registry) error {

	if swag.IsZero(m.CampaignStats) { // not required
		return nil
	}

	for i := 0; i < len(m.CampaignStats); i++ {
		if swag.IsZero(m.CampaignStats[i]) { // not required
			continue
		}

		if m.CampaignStats[i] != nil {
			if err := m.CampaignStats[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("campaignStats" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetExtendedList) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedList) validateFolderID(formats strfmt.Registry) error {

	if err := validate.Required("folderId", "body", m.FolderID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetExtendedList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetExtendedList) UnmarshalBinary(b []byte) error {
	var res GetExtendedList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetExtendedListCampaignStatsItems0 get extended list campaign stats items0
// swagger:model GetExtendedListCampaignStatsItems0
type GetExtendedListCampaignStatsItems0 struct {

	// ID of the campaign
	// Required: true
	CampaignID *int64 `json:"campaignId"`

	// stats
	// Required: true
	Stats *GetCampaignStats `json:"stats"`
}

// Validate validates this get extended list campaign stats items0
func (m *GetExtendedListCampaignStatsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaignID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetExtendedListCampaignStatsItems0) validateCampaignID(formats strfmt.Registry) error {

	if err := validate.Required("campaignId", "body", m.CampaignID); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedListCampaignStatsItems0) validateStats(formats strfmt.Registry) error {

	if err := validate.Required("stats", "body", m.Stats); err != nil {
		return err
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetExtendedListCampaignStatsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetExtendedListCampaignStatsItems0) UnmarshalBinary(b []byte) error {
	var res GetExtendedListCampaignStatsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
