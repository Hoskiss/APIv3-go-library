// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AbTestCampaignResult ab test campaign result
// swagger:model abTestCampaignResult
type AbTestCampaignResult struct {

	// Click rate for current winning version
	ClickRate string `json:"clickRate,omitempty"`

	// Open rate for current winning version
	OpenRate string `json:"openRate,omitempty"`

	// Criteria choosen for winning version (Open/Click)
	// Enum: [Open Click]
	WinningCriteria string `json:"winningCriteria,omitempty"`

	// Subject Line of current winning version
	WinningSubjectLine string `json:"winningSubjectLine,omitempty"`

	// Winning Campaign Info. pending = Campaign has been picked for sending and winning version is yet to be decided, tie = A tie happened between both the versions, notAvailable = Campaign has not yet been picked for sending.
	// Enum: [notAvailable pending tie A B]
	WinningVersion string `json:"winningVersion,omitempty"`

	// Open/Click rate for the winner version
	WinningVersionRate string `json:"winningVersionRate,omitempty"`
}

// Validate validates this ab test campaign result
func (m *AbTestCampaignResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWinningCriteria(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWinningVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var abTestCampaignResultTypeWinningCriteriaPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Open","Click"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		abTestCampaignResultTypeWinningCriteriaPropEnum = append(abTestCampaignResultTypeWinningCriteriaPropEnum, v)
	}
}

const (

	// AbTestCampaignResultWinningCriteriaOpen captures enum value "Open"
	AbTestCampaignResultWinningCriteriaOpen string = "Open"

	// AbTestCampaignResultWinningCriteriaClick captures enum value "Click"
	AbTestCampaignResultWinningCriteriaClick string = "Click"
)

// prop value enum
func (m *AbTestCampaignResult) validateWinningCriteriaEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, abTestCampaignResultTypeWinningCriteriaPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AbTestCampaignResult) validateWinningCriteria(formats strfmt.Registry) error {

	if swag.IsZero(m.WinningCriteria) { // not required
		return nil
	}

	// value enum
	if err := m.validateWinningCriteriaEnum("winningCriteria", "body", m.WinningCriteria); err != nil {
		return err
	}

	return nil
}

var abTestCampaignResultTypeWinningVersionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["notAvailable","pending","tie","A","B"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		abTestCampaignResultTypeWinningVersionPropEnum = append(abTestCampaignResultTypeWinningVersionPropEnum, v)
	}
}

const (

	// AbTestCampaignResultWinningVersionNotAvailable captures enum value "notAvailable"
	AbTestCampaignResultWinningVersionNotAvailable string = "notAvailable"

	// AbTestCampaignResultWinningVersionPending captures enum value "pending"
	AbTestCampaignResultWinningVersionPending string = "pending"

	// AbTestCampaignResultWinningVersionTie captures enum value "tie"
	AbTestCampaignResultWinningVersionTie string = "tie"

	// AbTestCampaignResultWinningVersionA captures enum value "A"
	AbTestCampaignResultWinningVersionA string = "A"

	// AbTestCampaignResultWinningVersionB captures enum value "B"
	AbTestCampaignResultWinningVersionB string = "B"
)

// prop value enum
func (m *AbTestCampaignResult) validateWinningVersionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, abTestCampaignResultTypeWinningVersionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AbTestCampaignResult) validateWinningVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.WinningVersion) { // not required
		return nil
	}

	// value enum
	if err := m.validateWinningVersionEnum("winningVersion", "body", m.WinningVersion); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AbTestCampaignResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AbTestCampaignResult) UnmarshalBinary(b []byte) error {
	var res AbTestCampaignResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
