// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetTransacEmailContent get transac email content
// swagger:model getTransacEmailContent
type GetTransacEmailContent struct {

	// Count of the attachments that were sent in the email
	// Required: true
	AttachmentCount *int64 `json:"attachmentCount"`

	// Actual content of the transactional email that has been sent
	// Required: true
	Body *string `json:"body"`

	// Date on which transactional email was sent
	// Required: true
	// Format: date-time
	Date *strfmt.DateTime `json:"date"`

	// Email address to which transactional email has been sent
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// Series of events which occurred on the transactional email
	// Required: true
	Events []*GetTransacEmailContentEventsItems0 `json:"events"`

	// Subject of the sent email
	// Required: true
	Subject *string `json:"subject"`

	// Id of the template
	TemplateID int64 `json:"templateId,omitempty"`
}

// Validate validates this get transac email content
func (m *GetTransacEmailContent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachmentCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetTransacEmailContent) validateAttachmentCount(formats strfmt.Registry) error {

	if err := validate.Required("attachmentCount", "body", m.AttachmentCount); err != nil {
		return err
	}

	return nil
}

func (m *GetTransacEmailContent) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

func (m *GetTransacEmailContent) validateDate(formats strfmt.Registry) error {

	if err := validate.Required("date", "body", m.Date); err != nil {
		return err
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetTransacEmailContent) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetTransacEmailContent) validateEvents(formats strfmt.Registry) error {

	if err := validate.Required("events", "body", m.Events); err != nil {
		return err
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetTransacEmailContent) validateSubject(formats strfmt.Registry) error {

	if err := validate.Required("subject", "body", m.Subject); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetTransacEmailContent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetTransacEmailContent) UnmarshalBinary(b []byte) error {
	var res GetTransacEmailContent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetTransacEmailContentEventsItems0 get transac email content events items0
// swagger:model GetTransacEmailContentEventsItems0
type GetTransacEmailContentEventsItems0 struct {

	// Name of the event that occurred on the sent email
	// Required: true
	Name *string `json:"name"`

	// Time at which the event occurred
	// Required: true
	// Format: date-time
	Time *strfmt.DateTime `json:"time"`
}

// Validate validates this get transac email content events items0
func (m *GetTransacEmailContentEventsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetTransacEmailContentEventsItems0) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *GetTransacEmailContentEventsItems0) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	if err := validate.FormatOf("time", "body", "date-time", m.Time.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetTransacEmailContentEventsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetTransacEmailContentEventsItems0) UnmarshalBinary(b []byte) error {
	var res GetTransacEmailContentEventsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
