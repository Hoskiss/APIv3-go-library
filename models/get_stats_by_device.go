// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetStatsByDevice get stats by device
// swagger:model getStatsByDevice
type GetStatsByDevice struct {

	// Statistics of the campaign on the basis of desktop devices
	Desktop map[string]GetDeviceBrowserStats `json:"desktop,omitempty"`

	// Statistics of the campaign on the basis of mobile devices
	Mobile map[string]GetDeviceBrowserStats `json:"mobile,omitempty"`

	// Statistics of the campaign on the basis of tablet devices
	Tablet map[string]GetDeviceBrowserStats `json:"tablet,omitempty"`

	// Statistics of the campaign on the basis of unknown devices
	Unknown map[string]GetDeviceBrowserStats `json:"unknown,omitempty"`
}

// Validate validates this get stats by device
func (m *GetStatsByDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDesktop(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTablet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnknown(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetStatsByDevice) validateDesktop(formats strfmt.Registry) error {

	if swag.IsZero(m.Desktop) { // not required
		return nil
	}

	for k := range m.Desktop {

		if err := validate.Required("desktop"+"."+k, "body", m.Desktop[k]); err != nil {
			return err
		}
		if val, ok := m.Desktop[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *GetStatsByDevice) validateMobile(formats strfmt.Registry) error {

	if swag.IsZero(m.Mobile) { // not required
		return nil
	}

	for k := range m.Mobile {

		if err := validate.Required("mobile"+"."+k, "body", m.Mobile[k]); err != nil {
			return err
		}
		if val, ok := m.Mobile[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *GetStatsByDevice) validateTablet(formats strfmt.Registry) error {

	if swag.IsZero(m.Tablet) { // not required
		return nil
	}

	for k := range m.Tablet {

		if err := validate.Required("tablet"+"."+k, "body", m.Tablet[k]); err != nil {
			return err
		}
		if val, ok := m.Tablet[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *GetStatsByDevice) validateUnknown(formats strfmt.Registry) error {

	if swag.IsZero(m.Unknown) { // not required
		return nil
	}

	for k := range m.Unknown {

		if err := validate.Required("unknown"+"."+k, "body", m.Unknown[k]); err != nil {
			return err
		}
		if val, ok := m.Unknown[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetStatsByDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetStatsByDevice) UnmarshalBinary(b []byte) error {
	var res GetStatsByDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
