// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetExtendedContactDetails get extended contact details
// swagger:model getExtendedContactDetails
type GetExtendedContactDetails struct {
	GetContactDetails

	// statistics
	// Required: true
	Statistics *GetExtendedContactDetailsAO1Statistics `json:"statistics"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *GetExtendedContactDetails) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 GetContactDetails
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.GetContactDetails = aO0

	// AO1
	var dataAO1 struct {
		Statistics *GetExtendedContactDetailsAO1Statistics `json:"statistics"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Statistics = dataAO1.Statistics

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m GetExtendedContactDetails) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.GetContactDetails)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Statistics *GetExtendedContactDetailsAO1Statistics `json:"statistics"`
	}

	dataAO1.Statistics = m.Statistics

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get extended contact details
func (m *GetExtendedContactDetails) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with GetContactDetails
	if err := m.GetContactDetails.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatistics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetExtendedContactDetails) validateStatistics(formats strfmt.Registry) error {

	if err := validate.Required("statistics", "body", m.Statistics); err != nil {
		return err
	}

	if m.Statistics != nil {
		if err := m.Statistics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistics")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetExtendedContactDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetExtendedContactDetails) UnmarshalBinary(b []byte) error {
	var res GetExtendedContactDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetExtendedContactDetailsAO1Statistics Campaign statistics of the contact
// swagger:model GetExtendedContactDetailsAO1Statistics
type GetExtendedContactDetailsAO1Statistics struct {

	// Listing of the clicks generated by the contact
	Clicked []*GetExtendedContactDetailsAO1StatisticsClickedItems0 `json:"clicked"`

	// Listing of the complaints generated by the contact
	Complaints []*GetExtendedContactDetailsAO1StatisticsComplaintsItems0 `json:"complaints"`

	// Listing of the hardbounes generated by the contact
	HardBounces []*GetExtendedContactDetailsAO1StatisticsHardBouncesItems0 `json:"hardBounces"`

	// Listing of the sent campaign for the contact
	MessagesSent []*GetExtendedContactDetailsAO1StatisticsMessagesSentItems0 `json:"messagesSent"`

	// Listing of the openings generated by the contact
	Opened []*GetExtendedContactDetailsAO1StatisticsOpenedItems0 `json:"opened"`

	// Listing of the softbounes generated by the contact
	SoftBounces []*GetExtendedContactDetailsAO1StatisticsSoftBouncesItems0 `json:"softBounces"`

	// Listing of the transactional attributes for the contact
	TransacAttributes []interface{} `json:"transacAttributes"`

	// unsubscriptions
	Unsubscriptions *GetExtendedContactDetailsAO1StatisticsUnsubscriptions `json:"unsubscriptions,omitempty"`
}

// Validate validates this get extended contact details a o1 statistics
func (m *GetExtendedContactDetailsAO1Statistics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClicked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComplaints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardBounces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessagesSent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpened(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftBounces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnsubscriptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetExtendedContactDetailsAO1Statistics) validateClicked(formats strfmt.Registry) error {

	if swag.IsZero(m.Clicked) { // not required
		return nil
	}

	for i := 0; i < len(m.Clicked); i++ {
		if swag.IsZero(m.Clicked[i]) { // not required
			continue
		}

		if m.Clicked[i] != nil {
			if err := m.Clicked[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statistics" + "." + "clicked" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetExtendedContactDetailsAO1Statistics) validateComplaints(formats strfmt.Registry) error {

	if swag.IsZero(m.Complaints) { // not required
		return nil
	}

	for i := 0; i < len(m.Complaints); i++ {
		if swag.IsZero(m.Complaints[i]) { // not required
			continue
		}

		if m.Complaints[i] != nil {
			if err := m.Complaints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statistics" + "." + "complaints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetExtendedContactDetailsAO1Statistics) validateHardBounces(formats strfmt.Registry) error {

	if swag.IsZero(m.HardBounces) { // not required
		return nil
	}

	for i := 0; i < len(m.HardBounces); i++ {
		if swag.IsZero(m.HardBounces[i]) { // not required
			continue
		}

		if m.HardBounces[i] != nil {
			if err := m.HardBounces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statistics" + "." + "hardBounces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetExtendedContactDetailsAO1Statistics) validateMessagesSent(formats strfmt.Registry) error {

	if swag.IsZero(m.MessagesSent) { // not required
		return nil
	}

	for i := 0; i < len(m.MessagesSent); i++ {
		if swag.IsZero(m.MessagesSent[i]) { // not required
			continue
		}

		if m.MessagesSent[i] != nil {
			if err := m.MessagesSent[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statistics" + "." + "messagesSent" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetExtendedContactDetailsAO1Statistics) validateOpened(formats strfmt.Registry) error {

	if swag.IsZero(m.Opened) { // not required
		return nil
	}

	for i := 0; i < len(m.Opened); i++ {
		if swag.IsZero(m.Opened[i]) { // not required
			continue
		}

		if m.Opened[i] != nil {
			if err := m.Opened[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statistics" + "." + "opened" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetExtendedContactDetailsAO1Statistics) validateSoftBounces(formats strfmt.Registry) error {

	if swag.IsZero(m.SoftBounces) { // not required
		return nil
	}

	for i := 0; i < len(m.SoftBounces); i++ {
		if swag.IsZero(m.SoftBounces[i]) { // not required
			continue
		}

		if m.SoftBounces[i] != nil {
			if err := m.SoftBounces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statistics" + "." + "softBounces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetExtendedContactDetailsAO1Statistics) validateUnsubscriptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Unsubscriptions) { // not required
		return nil
	}

	if m.Unsubscriptions != nil {
		if err := m.Unsubscriptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statistics" + "." + "unsubscriptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1Statistics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1Statistics) UnmarshalBinary(b []byte) error {
	var res GetExtendedContactDetailsAO1Statistics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetExtendedContactDetailsAO1StatisticsClickedItems0 get extended contact details a o1 statistics clicked items0
// swagger:model GetExtendedContactDetailsAO1StatisticsClickedItems0
type GetExtendedContactDetailsAO1StatisticsClickedItems0 struct {

	// ID of the campaign which generated the event
	// Required: true
	CampaignID *int64 `json:"campaignId"`

	// Listing of the clicked links for the campaign
	// Required: true
	Links []*GetExtendedContactDetailsAO1StatisticsClickedItems0LinksItems0 `json:"links"`
}

// Validate validates this get extended contact details a o1 statistics clicked items0
func (m *GetExtendedContactDetailsAO1StatisticsClickedItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaignID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsClickedItems0) validateCampaignID(formats strfmt.Registry) error {

	if err := validate.Required("campaignId", "body", m.CampaignID); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsClickedItems0) validateLinks(formats strfmt.Registry) error {

	if err := validate.Required("links", "body", m.Links); err != nil {
		return err
	}

	for i := 0; i < len(m.Links); i++ {
		if swag.IsZero(m.Links[i]) { // not required
			continue
		}

		if m.Links[i] != nil {
			if err := m.Links[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("links" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsClickedItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsClickedItems0) UnmarshalBinary(b []byte) error {
	var res GetExtendedContactDetailsAO1StatisticsClickedItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetExtendedContactDetailsAO1StatisticsClickedItems0LinksItems0 get extended contact details a o1 statistics clicked items0 links items0
// swagger:model GetExtendedContactDetailsAO1StatisticsClickedItems0LinksItems0
type GetExtendedContactDetailsAO1StatisticsClickedItems0LinksItems0 struct {

	// Number of clicks on this link for the campaign
	// Required: true
	Count *int64 `json:"count"`

	// UTC date-time of the event
	// Required: true
	// Format: date-time
	EventTime *strfmt.DateTime `json:"eventTime"`

	// IP from which the user has clicked on the link
	// Required: true
	IP *string `json:"ip"`

	// URL of the clicked link
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this get extended contact details a o1 statistics clicked items0 links items0
func (m *GetExtendedContactDetailsAO1StatisticsClickedItems0LinksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsClickedItems0LinksItems0) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsClickedItems0LinksItems0) validateEventTime(formats strfmt.Registry) error {

	if err := validate.Required("eventTime", "body", m.EventTime); err != nil {
		return err
	}

	if err := validate.FormatOf("eventTime", "body", "date-time", m.EventTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsClickedItems0LinksItems0) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsClickedItems0LinksItems0) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsClickedItems0LinksItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsClickedItems0LinksItems0) UnmarshalBinary(b []byte) error {
	var res GetExtendedContactDetailsAO1StatisticsClickedItems0LinksItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetExtendedContactDetailsAO1StatisticsComplaintsItems0 get extended contact details a o1 statistics complaints items0
// swagger:model GetExtendedContactDetailsAO1StatisticsComplaintsItems0
type GetExtendedContactDetailsAO1StatisticsComplaintsItems0 struct {

	// ID of the campaign which generated the event
	// Required: true
	CampaignID *int64 `json:"campaignId"`

	// UTC date-time of the event
	// Required: true
	// Format: date-time
	EventTime *strfmt.DateTime `json:"eventTime"`
}

// Validate validates this get extended contact details a o1 statistics complaints items0
func (m *GetExtendedContactDetailsAO1StatisticsComplaintsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaignID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsComplaintsItems0) validateCampaignID(formats strfmt.Registry) error {

	if err := validate.Required("campaignId", "body", m.CampaignID); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsComplaintsItems0) validateEventTime(formats strfmt.Registry) error {

	if err := validate.Required("eventTime", "body", m.EventTime); err != nil {
		return err
	}

	if err := validate.FormatOf("eventTime", "body", "date-time", m.EventTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsComplaintsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsComplaintsItems0) UnmarshalBinary(b []byte) error {
	var res GetExtendedContactDetailsAO1StatisticsComplaintsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetExtendedContactDetailsAO1StatisticsHardBouncesItems0 get extended contact details a o1 statistics hard bounces items0
// swagger:model GetExtendedContactDetailsAO1StatisticsHardBouncesItems0
type GetExtendedContactDetailsAO1StatisticsHardBouncesItems0 struct {

	// ID of the campaign which generated the event
	// Required: true
	CampaignID *int64 `json:"campaignId"`

	// UTC date-time of the event
	// Required: true
	// Format: date-time
	EventTime *strfmt.DateTime `json:"eventTime"`
}

// Validate validates this get extended contact details a o1 statistics hard bounces items0
func (m *GetExtendedContactDetailsAO1StatisticsHardBouncesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaignID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsHardBouncesItems0) validateCampaignID(formats strfmt.Registry) error {

	if err := validate.Required("campaignId", "body", m.CampaignID); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsHardBouncesItems0) validateEventTime(formats strfmt.Registry) error {

	if err := validate.Required("eventTime", "body", m.EventTime); err != nil {
		return err
	}

	if err := validate.FormatOf("eventTime", "body", "date-time", m.EventTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsHardBouncesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsHardBouncesItems0) UnmarshalBinary(b []byte) error {
	var res GetExtendedContactDetailsAO1StatisticsHardBouncesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetExtendedContactDetailsAO1StatisticsMessagesSentItems0 get extended contact details a o1 statistics messages sent items0
// swagger:model GetExtendedContactDetailsAO1StatisticsMessagesSentItems0
type GetExtendedContactDetailsAO1StatisticsMessagesSentItems0 struct {

	// ID of the campaign which generated the event
	// Required: true
	CampaignID *int64 `json:"campaignId"`

	// UTC date-time of the event
	// Required: true
	// Format: date-time
	EventTime *strfmt.DateTime `json:"eventTime"`
}

// Validate validates this get extended contact details a o1 statistics messages sent items0
func (m *GetExtendedContactDetailsAO1StatisticsMessagesSentItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaignID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsMessagesSentItems0) validateCampaignID(formats strfmt.Registry) error {

	if err := validate.Required("campaignId", "body", m.CampaignID); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsMessagesSentItems0) validateEventTime(formats strfmt.Registry) error {

	if err := validate.Required("eventTime", "body", m.EventTime); err != nil {
		return err
	}

	if err := validate.FormatOf("eventTime", "body", "date-time", m.EventTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsMessagesSentItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsMessagesSentItems0) UnmarshalBinary(b []byte) error {
	var res GetExtendedContactDetailsAO1StatisticsMessagesSentItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetExtendedContactDetailsAO1StatisticsOpenedItems0 get extended contact details a o1 statistics opened items0
// swagger:model GetExtendedContactDetailsAO1StatisticsOpenedItems0
type GetExtendedContactDetailsAO1StatisticsOpenedItems0 struct {

	// ID of the campaign which generated the event
	// Required: true
	CampaignID *int64 `json:"campaignId"`

	// Number of openings for the campaign
	// Required: true
	Count *int64 `json:"count"`

	// UTC date-time of the event
	// Required: true
	// Format: date-time
	EventTime *strfmt.DateTime `json:"eventTime"`

	// IP from which the user has opened the email
	// Required: true
	IP *string `json:"ip"`
}

// Validate validates this get extended contact details a o1 statistics opened items0
func (m *GetExtendedContactDetailsAO1StatisticsOpenedItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaignID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsOpenedItems0) validateCampaignID(formats strfmt.Registry) error {

	if err := validate.Required("campaignId", "body", m.CampaignID); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsOpenedItems0) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsOpenedItems0) validateEventTime(formats strfmt.Registry) error {

	if err := validate.Required("eventTime", "body", m.EventTime); err != nil {
		return err
	}

	if err := validate.FormatOf("eventTime", "body", "date-time", m.EventTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsOpenedItems0) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsOpenedItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsOpenedItems0) UnmarshalBinary(b []byte) error {
	var res GetExtendedContactDetailsAO1StatisticsOpenedItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetExtendedContactDetailsAO1StatisticsSoftBouncesItems0 get extended contact details a o1 statistics soft bounces items0
// swagger:model GetExtendedContactDetailsAO1StatisticsSoftBouncesItems0
type GetExtendedContactDetailsAO1StatisticsSoftBouncesItems0 struct {

	// ID of the campaign which generated the event
	// Required: true
	CampaignID *int64 `json:"campaignId"`

	// UTC date-time of the event
	// Required: true
	// Format: date-time
	EventTime *strfmt.DateTime `json:"eventTime"`
}

// Validate validates this get extended contact details a o1 statistics soft bounces items0
func (m *GetExtendedContactDetailsAO1StatisticsSoftBouncesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaignID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsSoftBouncesItems0) validateCampaignID(formats strfmt.Registry) error {

	if err := validate.Required("campaignId", "body", m.CampaignID); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsSoftBouncesItems0) validateEventTime(formats strfmt.Registry) error {

	if err := validate.Required("eventTime", "body", m.EventTime); err != nil {
		return err
	}

	if err := validate.FormatOf("eventTime", "body", "date-time", m.EventTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsSoftBouncesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsSoftBouncesItems0) UnmarshalBinary(b []byte) error {
	var res GetExtendedContactDetailsAO1StatisticsSoftBouncesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetExtendedContactDetailsAO1StatisticsUnsubscriptions Listing of the unsubscription for the contact
// swagger:model GetExtendedContactDetailsAO1StatisticsUnsubscriptions
type GetExtendedContactDetailsAO1StatisticsUnsubscriptions struct {

	// Contact has been unsubscribed from the administrator
	// Required: true
	AdminUnsubscription []*GetExtendedContactDetailsAO1StatisticsUnsubscriptionsAdminUnsubscriptionItems0 `json:"adminUnsubscription"`

	// Contact unsubscribe via unsubscription link in a campaign
	// Required: true
	UserUnsubscription []*GetExtendedContactDetailsAO1StatisticsUnsubscriptionsUserUnsubscriptionItems0 `json:"userUnsubscription"`
}

// Validate validates this get extended contact details a o1 statistics unsubscriptions
func (m *GetExtendedContactDetailsAO1StatisticsUnsubscriptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminUnsubscription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserUnsubscription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsUnsubscriptions) validateAdminUnsubscription(formats strfmt.Registry) error {

	if err := validate.Required("statistics"+"."+"unsubscriptions"+"."+"adminUnsubscription", "body", m.AdminUnsubscription); err != nil {
		return err
	}

	for i := 0; i < len(m.AdminUnsubscription); i++ {
		if swag.IsZero(m.AdminUnsubscription[i]) { // not required
			continue
		}

		if m.AdminUnsubscription[i] != nil {
			if err := m.AdminUnsubscription[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statistics" + "." + "unsubscriptions" + "." + "adminUnsubscription" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsUnsubscriptions) validateUserUnsubscription(formats strfmt.Registry) error {

	if err := validate.Required("statistics"+"."+"unsubscriptions"+"."+"userUnsubscription", "body", m.UserUnsubscription); err != nil {
		return err
	}

	for i := 0; i < len(m.UserUnsubscription); i++ {
		if swag.IsZero(m.UserUnsubscription[i]) { // not required
			continue
		}

		if m.UserUnsubscription[i] != nil {
			if err := m.UserUnsubscription[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("statistics" + "." + "unsubscriptions" + "." + "userUnsubscription" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsUnsubscriptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsUnsubscriptions) UnmarshalBinary(b []byte) error {
	var res GetExtendedContactDetailsAO1StatisticsUnsubscriptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetExtendedContactDetailsAO1StatisticsUnsubscriptionsAdminUnsubscriptionItems0 get extended contact details a o1 statistics unsubscriptions admin unsubscription items0
// swagger:model GetExtendedContactDetailsAO1StatisticsUnsubscriptionsAdminUnsubscriptionItems0
type GetExtendedContactDetailsAO1StatisticsUnsubscriptionsAdminUnsubscriptionItems0 struct {

	// UTC date-time of the event
	// Required: true
	// Format: date-time
	EventTime *strfmt.DateTime `json:"eventTime"`

	// IP from which the user has been unsubscribed
	// Required: true
	IP *string `json:"ip"`
}

// Validate validates this get extended contact details a o1 statistics unsubscriptions admin unsubscription items0
func (m *GetExtendedContactDetailsAO1StatisticsUnsubscriptionsAdminUnsubscriptionItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsUnsubscriptionsAdminUnsubscriptionItems0) validateEventTime(formats strfmt.Registry) error {

	if err := validate.Required("eventTime", "body", m.EventTime); err != nil {
		return err
	}

	if err := validate.FormatOf("eventTime", "body", "date-time", m.EventTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsUnsubscriptionsAdminUnsubscriptionItems0) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsUnsubscriptionsAdminUnsubscriptionItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsUnsubscriptionsAdminUnsubscriptionItems0) UnmarshalBinary(b []byte) error {
	var res GetExtendedContactDetailsAO1StatisticsUnsubscriptionsAdminUnsubscriptionItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetExtendedContactDetailsAO1StatisticsUnsubscriptionsUserUnsubscriptionItems0 get extended contact details a o1 statistics unsubscriptions user unsubscription items0
// swagger:model GetExtendedContactDetailsAO1StatisticsUnsubscriptionsUserUnsubscriptionItems0
type GetExtendedContactDetailsAO1StatisticsUnsubscriptionsUserUnsubscriptionItems0 struct {

	// ID of the campaign which generated the event
	// Required: true
	CampaignID *int64 `json:"campaignId"`

	// UTC date-time of the event
	// Required: true
	// Format: date-time
	EventTime *strfmt.DateTime `json:"eventTime"`

	// IP from which the user has unsubscribed
	// Required: true
	IP *string `json:"ip"`
}

// Validate validates this get extended contact details a o1 statistics unsubscriptions user unsubscription items0
func (m *GetExtendedContactDetailsAO1StatisticsUnsubscriptionsUserUnsubscriptionItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCampaignID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsUnsubscriptionsUserUnsubscriptionItems0) validateCampaignID(formats strfmt.Registry) error {

	if err := validate.Required("campaignId", "body", m.CampaignID); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsUnsubscriptionsUserUnsubscriptionItems0) validateEventTime(formats strfmt.Registry) error {

	if err := validate.Required("eventTime", "body", m.EventTime); err != nil {
		return err
	}

	if err := validate.FormatOf("eventTime", "body", "date-time", m.EventTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetExtendedContactDetailsAO1StatisticsUnsubscriptionsUserUnsubscriptionItems0) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("ip", "body", m.IP); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsUnsubscriptionsUserUnsubscriptionItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetExtendedContactDetailsAO1StatisticsUnsubscriptionsUserUnsubscriptionItems0) UnmarshalBinary(b []byte) error {
	var res GetExtendedContactDetailsAO1StatisticsUnsubscriptionsUserUnsubscriptionItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
