// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SendReport send report
// swagger:model sendReport
type SendReport struct {

	// email
	// Required: true
	Email *SendReportEmail `json:"email"`

	// Language of email content for campaign report sending.
	// Enum: [fr es pt it de en]
	Language *string `json:"language,omitempty"`
}

// Validate validates this send report
func (m *SendReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendReport) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if m.Email != nil {
		if err := m.Email.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email")
			}
			return err
		}
	}

	return nil
}

var sendReportTypeLanguagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fr","es","pt","it","de","en"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sendReportTypeLanguagePropEnum = append(sendReportTypeLanguagePropEnum, v)
	}
}

const (

	// SendReportLanguageFr captures enum value "fr"
	SendReportLanguageFr string = "fr"

	// SendReportLanguageEs captures enum value "es"
	SendReportLanguageEs string = "es"

	// SendReportLanguagePt captures enum value "pt"
	SendReportLanguagePt string = "pt"

	// SendReportLanguageIt captures enum value "it"
	SendReportLanguageIt string = "it"

	// SendReportLanguageDe captures enum value "de"
	SendReportLanguageDe string = "de"

	// SendReportLanguageEn captures enum value "en"
	SendReportLanguageEn string = "en"
)

// prop value enum
func (m *SendReport) validateLanguageEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sendReportTypeLanguagePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SendReport) validateLanguage(formats strfmt.Registry) error {

	if swag.IsZero(m.Language) { // not required
		return nil
	}

	// value enum
	if err := m.validateLanguageEnum("language", "body", *m.Language); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SendReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SendReport) UnmarshalBinary(b []byte) error {
	var res SendReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SendReportEmail Email sending credentials including subject, body, to, cc etc.
// swagger:model SendReportEmail
type SendReportEmail struct {

	// Email addresses of the recipients in bcc
	Bcc []strfmt.Email `json:"bcc"`

	// Body of the email message
	// Required: true
	Body *string `json:"body"`

	// Email addresses of the recipients in cc
	Cc []strfmt.Email `json:"cc"`

	// Type of the message body
	// Enum: [text html]
	ContentType *string `json:"contentType,omitempty"`

	// Subject of the email message
	// Required: true
	Subject *string `json:"subject"`

	// Email addresses of the recipients
	// Required: true
	To []strfmt.Email `json:"to"`
}

// Validate validates this send report email
func (m *SendReportEmail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBcc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendReportEmail) validateBcc(formats strfmt.Registry) error {

	if swag.IsZero(m.Bcc) { // not required
		return nil
	}

	for i := 0; i < len(m.Bcc); i++ {

		if err := validate.FormatOf("email"+"."+"bcc"+"."+strconv.Itoa(i), "body", "email", m.Bcc[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *SendReportEmail) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("email"+"."+"body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

func (m *SendReportEmail) validateCc(formats strfmt.Registry) error {

	if swag.IsZero(m.Cc) { // not required
		return nil
	}

	for i := 0; i < len(m.Cc); i++ {

		if err := validate.FormatOf("email"+"."+"cc"+"."+strconv.Itoa(i), "body", "email", m.Cc[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

var sendReportEmailTypeContentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["text","html"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sendReportEmailTypeContentTypePropEnum = append(sendReportEmailTypeContentTypePropEnum, v)
	}
}

const (

	// SendReportEmailContentTypeText captures enum value "text"
	SendReportEmailContentTypeText string = "text"

	// SendReportEmailContentTypeHTML captures enum value "html"
	SendReportEmailContentTypeHTML string = "html"
)

// prop value enum
func (m *SendReportEmail) validateContentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sendReportEmailTypeContentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SendReportEmail) validateContentType(formats strfmt.Registry) error {

	if swag.IsZero(m.ContentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateContentTypeEnum("email"+"."+"contentType", "body", *m.ContentType); err != nil {
		return err
	}

	return nil
}

func (m *SendReportEmail) validateSubject(formats strfmt.Registry) error {

	if err := validate.Required("email"+"."+"subject", "body", m.Subject); err != nil {
		return err
	}

	return nil
}

func (m *SendReportEmail) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("email"+"."+"to", "body", m.To); err != nil {
		return err
	}

	for i := 0; i < len(m.To); i++ {

		if err := validate.FormatOf("email"+"."+"to"+"."+strconv.Itoa(i), "body", "email", m.To[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SendReportEmail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SendReportEmail) UnmarshalBinary(b []byte) error {
	var res SendReportEmail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
