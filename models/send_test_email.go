// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SendTestEmail send test email
// swagger:model sendTestEmail
type SendTestEmail struct {

	// List of the email addresses of the recipients whom you wish to send the test mail. If left empty, the test mail will be sent to your entire test list.
	EmailTo []strfmt.Email `json:"emailTo"`
}

// Validate validates this send test email
func (m *SendTestEmail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmailTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendTestEmail) validateEmailTo(formats strfmt.Registry) error {

	if swag.IsZero(m.EmailTo) { // not required
		return nil
	}

	for i := 0; i < len(m.EmailTo); i++ {

		if err := validate.FormatOf("emailTo"+"."+strconv.Itoa(i), "body", "email", m.EmailTo[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SendTestEmail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SendTestEmail) UnmarshalBinary(b []byte) error {
	var res SendTestEmail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
